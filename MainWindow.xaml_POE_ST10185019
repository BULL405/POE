using PROG6221_POE;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PROG6221_POE
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
        public class MainViewModel : INotifyPropertyChanged
        {
            private ObservableCollection<Recipe> _recipes;
            public ObservableCollection<Recipe> Recipes
            {
                get { return _recipes; }
                set
                {
                    _recipes = value;
                    OnPropertyChanged(nameof(Recipes));
                }
            }

            // Code for filtering and other functionalities goes here...

            public event PropertyChangedEventHandler PropertyChanged;
            protected void OnPropertyChanged(string propertyName)
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }
        }

    }
    public class Recipe
    {
        public string Name { get; set; }
        public List<string> Ingredients { get; set; }
        public string FoodGroup { get; set; }
        public int Calories { get; set; }
    }
    public class MainViewModel : Window
    {
        private ObservableCollection<Recipe> _recipes;
        public ObservableCollection<Recipe> Recipes
        {
            get { return _recipes; }
            set
            {
                _recipes = value;
                OnPropertyChanged(nameof(Recipes));
            }
        }

        // Code for filtering and other functionalities goes here...

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        // Add properties for filtering options
        private string _ingredientFilter;
        public string IngredientFilter
        {
            get { return _ingredientFilter; }
            set
            {
                _ingredientFilter = value;
                FilterRecipes();
                OnPropertyChanged(nameof(IngredientFilter));
            }
        }

        private string _foodGroupFilter;
        public string FoodGroupFilter
        {
            get { return _foodGroupFilter; }
            set
            {
                _foodGroupFilter = value;
                FilterRecipes();
                OnPropertyChanged(nameof(FoodGroupFilter));
            }
        }

        private int _maxCaloriesFilter;
        public int MaxCaloriesFilter
        {
            get { return _maxCaloriesFilter; }
            set
            {
                _maxCaloriesFilter = value;
                FilterRecipes();
                OnPropertyChanged(nameof(MaxCaloriesFilter));
            }
        }

        private void FilterRecipes()
        {
            // Implement the logic to filter the Recipes ObservableCollection based on the filter options
            // Example: _filteredRecipes = _recipes.Where(recipe => recipe.Ingredients.Contains(_ingredientFilter) &&
            //                                                   recipe.FoodGroup == _foodGroupFilter &&
            //                                                   recipe.Calories <= _maxCaloriesFilter).ToList();
        }

    }


}


namespace RecipeApp
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;
            LoadRecipes();
        }

        private void InitializeComponent()
        {
            throw new NotImplementedException();
        }

        private void LoadRecipes()
        {
            // Load recipe data from the data source and populate the Recipes ObservableCollection in _viewModel
            // Example: _viewModel.Recipes = new ObservableCollection<Recipe>(GetRecipesFromDataSource());
        }
        

namespace RecipeApp
    {
        public class MainViewModel : INotifyPropertyChanged
        {
            public ObservableCollection<Recipe> Recipes { get; set; }

            // Other properties and methods for filtering and calculating the pie chart percentage go here...

            private string _ingredientFilter;
            public string IngredientFilter
            {
                get { return _ingredientFilter; }
                set
                {
                    _ingredientFilter = value;
                    FilterRecipes();
                    OnPropertyChanged(nameof(IngredientFilter));
                }
            }

            private string _foodGroupFilter;
            public string FoodGroupFilter
            {
                get { return _foodGroupFilter; }
                set
                {
                    _foodGroupFilter = value;
                    FilterRecipes();
                    OnPropertyChanged(nameof(FoodGroupFilter));
                }
            }

            private int _maxCaloriesFilter;
            public int MaxCaloriesFilter
            {
                get { return _maxCaloriesFilter; }
                set
                {
                    _maxCaloriesFilter = value;
                    FilterRecipes();
                    OnPropertyChanged(nameof(MaxCaloriesFilter));
                }
            }

            private ObservableCollection<Recipe> _filteredRecipes;
            public ObservableCollection<Recipe> FilteredRecipes
            {
                get { return _filteredRecipes; }
                set
                {
                    _filteredRecipes = value;
                    OnPropertyChanged(nameof(FilteredRecipes));
                }
            }

            private void FilterRecipes()
            {
                var filtered = Recipes
                    .Where(recipe =>
                        (string.IsNullOrEmpty(IngredientFilter) || recipe.Ingredients.Contains(IngredientFilter)) &&
                        (string.IsNullOrEmpty(FoodGroupFilter) || recipe.FoodGroup == FoodGroupFilter) &&
                        (recipe.Calories <= MaxCaloriesFilter))
                    .ToList();

                FilteredRecipes = new ObservableCollection<Recipe>(filtered);
            }

            public event PropertyChangedEventHandler PropertyChanged;
            protected void OnPropertyChanged(string propertyName)
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

}
}

